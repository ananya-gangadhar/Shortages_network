theme(legend.position="none", plot.margin=unit(rep(1,4), "cm")
)
# Libraries
library(tidyverse)
library(viridis)
library(patchwork)
library(hrbrthemes)
library(ggraph)
library(igraph)
library(networkD3)
# Load researcher data
setwd('/Users/ananyagangadhar/Desktop/M.Eng\ Project/Shortages_network/R_scripts')
# Load researcher data
dataUU <- read.csv("2002_adj_matrix.csv", header=TRUE)
head(dataUU[1:3])
# Transform the adjacency matrix in a long format
connect <- dataUU %>% gather(destination, value, 2:ncol(dataUU))
connect <- connect[!connect$value == 0, ]
# Number of connection per person
c( as.character(connect$X), as.character(connect$destination)) %>% as_tibble() %>%
group_by(value) %>% summarize(n=n()) -> coauth
colnames(coauth) <- c("name", "n")
coauth
# Create a graph object with igraph
mygraph <- graph_from_data_frame( connect, vertices = coauth )
# Make the graph
ggraph(mygraph, layout="kk") +
#geom_edge_density(edge_fill="#69b3a2") +
geom_edge_link(edge_colour="black", edge_alpha=0.2, edge_width=0.3) +
geom_node_point(aes(size=n/2, alpha=n)) +
geom_node_text(aes(label=name, alpha=n), size=2, vjust=2, hjust=1) +
theme_void() +
theme(legend.position="none", plot.margin=unit(rep(1,4), "cm")
)
# Libraries
library(tidyverse)
library(viridis)
library(patchwork)
library(hrbrthemes)
library(ggraph)
library(igraph)
library(networkD3)
# Load researcher data
setwd('/Users/ananyagangadhar/Desktop/M.Eng\ Project/Shortages_network/R_scripts')
# Load researcher data
dataUU <- read.csv("2002_adj_matrix.csv", header=TRUE)
head(dataUU[1:3])
# Transform the adjacency matrix in a long format
connect <- dataUU %>% gather(destination, value, 2:ncol(dataUU))
connect <- connect[!connect$value == 0, ]
# Number of connection per person
c( as.character(connect$X), as.character(connect$destination)) %>% as_tibble() %>%
group_by(value) %>% summarize(n=n()) -> coauth
colnames(coauth) <- c("name", "n")
coauth
# Create a graph object with igraph
mygraph <- graph_from_data_frame( connect, vertices = coauth )
# Make the graph
ggraph(mygraph, layout="kk") +
#geom_edge_density(edge_fill="#69b3a2") +
geom_edge_link(edge_colour="black", edge_alpha=0.2, edge_width=0.3) +
geom_node_point(aes(size=n/2, alpha=n)) +
geom_node_text(aes(label=name, alpha=n), size=2, vjust=2, hjust=1) +
theme_void() +
theme(legend.position="none", plot.margin=unit(rep(1,4), "cm")
)
# Make the graph
ggraph(mygraph, layout="fr") +
#geom_edge_density(edge_fill="#69b3a2") +
geom_edge_link(edge_colour="black", edge_alpha=0.2, edge_width=0.3) +
geom_node_point(aes(size=n/2, alpha=n)) +
geom_node_text(aes(label=name, alpha=n), size=2, vjust=2, hjust=1) +
theme_void() +
theme(legend.position="none", plot.margin=unit(rep(1,4), "cm")
)
# Create a graph object with igraph
mygraph <- graph_from_data_frame( connect, vertices = coauth )
# Make the graph
ggraph(mygraph, layout="fr") +
#geom_edge_density(edge_fill="#69b3a2") +
geom_edge_link(edge_colour="black", edge_alpha=0.2, edge_width=0.3) +
geom_node_point(aes(size=n/2, alpha=n)) +
#geom_node_text(aes(label=name, alpha=n), size=2, vjust=2, hjust=1) +
theme_void() +
theme(legend.position="none", plot.margin=unit(rep(1,4), "cm")
)
# Make the graph
ggraph(mygraph, layout="fr") +
#geom_edge_density(edge_fill="#69b3a2") +
geom_edge_link(edge_colour="black", edge_alpha=0.2, edge_width=0.1) +
geom_node_point(aes(size=n/2, alpha=n)) +
#geom_node_text(aes(label=name, alpha=n), size=2, vjust=2, hjust=1) +
theme_void() +
theme(legend.position="none", plot.margin=unit(rep(1,4), "cm")
)
#hw4
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd('/Users/ananyagangadhar/Desktop/BEE\ 6310/Assignment4/')
# a)
load('LBDA.RData')
load('lon.lat.RData')
# b)
S <- cor(LBDA)
PCA <- prcomp(LBDA, center = TRUE, scale. = TRUE)
# c)
stds <- PCA$sdev[1:10]
vars <- stds^2
vars
# d)
x <- c(1:10)
par(mfrow=c(1,1))
plot(x, vars, main= 'Scree plot', ylab = 'lambda')
abline(v=5.5, lty=3)
errors <- sqrt(2/nrow(LBDA)) * vars
arrows(x, vars-errors, x, vars+errors, length=0.08, angle=90, code=3)
# keep first 4 PCs?
m <- 4
# e)
library('maps')
par(mfrow=c(2,2))
mybreaks <-c(seq(-0.04,-0.001,by=0.004),seq(0.001,0.04,by=0.004))
mycolpal <-colorRampPalette(c("red","white","blue"))
for (i in 1:m){
mycut <-cut(PCA$rotation[,i],breaks=mybreaks,label=FALSE)
mycol <-mycolpal(length(mybreaks))[mycut]
# f)
plot(lon.lat$lon, lon.lat$lat, col = mycol, axes=FALSE, xlab='', ylab='',
main = paste('EOF', i, sep = " "))
map("world",add=T)
}
########################################################
# g)
n <- nrow(PCA$x)
pc <- cbind(PCA$x[,1], PCA$x[,2], PCA$x[,3], PCA$x[,4]) # first 4 PCs
pred <- c()
for (i in 1:m){
my_data <- data.frame("y"= pc[2:n, i], "x"=pc[1:n-1, i])
lin_mod <- lm(y ~ x, data = my_data)
print(lin_mod$coefficients[2]) # alpha
# h)
new_data <- data.frame("x" = pc[n, i])
pred <- cbind(pred, predict(lin_mod, newdata=new_data)) # PWDI forecast for 2006
}
# i)
# pred is truncated U, need first 4 cols of W
x_2006 <- pred %*% t(PCA$rotation[,1:m])
x_2006[1:100]
# j)
par(mfrow=c(1,1))
mybreaks <-c(seq(-1,-0.001,by=0.004),seq(0.001,1,by=0.004))
mycolpal <-colorRampPalette(c("red","white","blue"))
mycut <-cut(x_2006,breaks=mybreaks,label=FALSE)
mycol <-mycolpal(length(mybreaks))[mycut]
plot(lon.lat$lon, lon.lat$lat, col = mycol, axes=FALSE, xlab='', ylab='',
main = paste('2006 PWDI prediction'))
map("world",add=T)
# In 2006, prediction that the American west will have a moderately wet year
# while the northeast and south will have average precipitation
# In 2005, pc1 and pc3 had the most anomalous values, in lin models alpha for pc1 > alpha for pc3
# Thus 2006 prediction dominated by EOF1 and negative expression of EOF3 to a lesser extent
#######################################################
# k)
my_varimax <-varimax(PCA$rotation[,1:m])
# l)
?prcomp
PCA$rotation
PCA$rotation[,1]
# l)
rotated_eofs <- PCA$rotation[,1:m] %*% my_varimax
my_varimax
?varimax
varimax[1]
my_varimax[1]
my_varimax[2]
# l)
rotated_eofs <- PCA$rotation[,1:m] %*% my_varimax$rotmat
rotated_eofs
rotated_pcs <- t(rotated_eofs) %*% LBDA
LBDA
nrow(LBDA)
ncol(LBDA)
c(nrow(rotated_eofs),ncol(rotated_eofs) )
rotated_pcs <- LBDA %*% rotated_eofs
rotated_pcs
?prcomp
S_og <- diag(PCA$sdev^2)
S_rotated <- t(my_varimax) %*% S_og %*% my_varimax
PCA$sdev
PCA$sdev^2
# m)
S_og <- diag(PCA$sdev^2)
S_rotated <- t(my_varimax) %*% S_og %*% my_varimax
S_rotated <- t(my_varimax$rotmat) %*% S_og %*% my_varimax$rotmat
c(nrow(S_og), ncol(S_og))
c(nrow(my_varimax$rotmat), ncol(my_varimax$rotmat))
S_og <- diag(PCA$sdev[1:4]^2)
S_rotated <- t(my_varimax$rotmat) %*% S_og %*% my_varimax$rotmat
S_og
S_rotated
par(mfrow=c(2,2))
mybreaks <-c(seq(-0.04,-0.001,by=0.004),seq(0.001,0.04,by=0.004))
mycolpal <-colorRampPalette(c("red","white","blue"))
for (i in 1:m){
mycut <-cut(rotated_eofs[,i],breaks=mybreaks,label=FALSE)
mycol <-mycolpal(length(mybreaks))[mycut]
plot(lon.lat$lon, lon.lat$lat, col = mycol, axes=FALSE, xlab='', ylab='',
main = paste('Rotated EOF', i, sep = " "))
map("world",add=T)
}
par(mfrow=c(2,2))
mybreaks <-c(seq(-0.04,-0.001,by=0.004),seq(0.001,0.04,by=0.004))
mycolpal <-colorRampPalette(c("red","white","blue"))
for (i in 1:m){
mycut <-cut(PCA$rotation[,i],breaks=mybreaks,label=FALSE)
mycol <-mycolpal(length(mybreaks))[mycut]
# f)
plot(lon.lat$lon, lon.lat$lat, col = mycol, axes=FALSE, xlab='', ylab='',
main = paste('EOF', i, sep = " "))
map("world",add=T)
}
#HW4.R
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd('/Users/ananyagangadhar/Desktop/BEE\ 6310/Assignment4/')
# a)
load('LBDA.RData')
load('lon.lat.RData')
# b)
S <- cor(LBDA)
PCA <- prcomp(LBDA, center = TRUE, scale. = TRUE)
# c)
stds <- PCA$sdev[1:10]
vars <- stds^2
vars
# d)
x <- c(1:10)
par(mfrow=c(1,1))
plot(x, vars, main= 'Scree plot', ylab = 'lambda')
abline(v=5.5, lty=3)
errors <- sqrt(2/nrow(LBDA)) * vars
arrows(x, vars-errors, x, vars+errors, length=0.08, angle=90, code=3)
# keep first 4 PCs?
m <- 4
x <- c(1:10)
par(mfrow=c(1,1))
plot(x, vars, main= 'Scree plot', ylab = 'lambda')
abline(v=4.5, lty=3)
errors <- sqrt(2/nrow(LBDA)) * vars
arrows(x, vars-errors, x, vars+errors, length=0.08, angle=90, code=3)
# e)
library('maps')
par(mfrow=c(2,2))
mybreaks <-c(seq(-0.04,-0.001,by=0.004),seq(0.001,0.04,by=0.004))
mycolpal <-colorRampPalette(c("red","white","blue"))
for (i in 1:m){
mycut <-cut(PCA$rotation[,i],breaks=mybreaks,label=FALSE)
mycol <-mycolpal(length(mybreaks))[mycut]
# f)
plot(lon.lat$lon, lon.lat$lat, col = mycol, axes=FALSE, xlab='', ylab='',
main = paste('EOF', i, sep = " "))
map("world",add=T)
}
# g)
n <- nrow(PCA$x)
pc <- cbind(PCA$x[,1], PCA$x[,2], PCA$x[,3], PCA$x[,4]) # first 4 PCs
pred <- c()
for (i in 1:m){
my_data <- data.frame("y"= pc[2:n, i], "x"=pc[1:n-1, i])
lin_mod <- lm(y ~ x, data = my_data)
print(lin_mod$coefficients[2]) # alpha
# h)
new_data <- data.frame("x" = pc[n, i])
pred <- cbind(pred, predict(lin_mod, newdata=new_data)) # PWDI forecast for 2006
}
# i)
# pred is truncated U, need first 4 cols of W
x_2006 <- pred %*% t(PCA$rotation[,1:m])
x_2006[1:100]
# j)
par(mfrow=c(1,1))
mybreaks <-c(seq(-1,-0.001,by=0.004),seq(0.001,1,by=0.004))
mycolpal <-colorRampPalette(c("red","white","blue"))
mycut <-cut(x_2006,breaks=mybreaks,label=FALSE)
mycol <-mycolpal(length(mybreaks))[mycut]
plot(lon.lat$lon, lon.lat$lat, col = mycol, axes=FALSE, xlab='', ylab='',
main = paste('2006 PWDI prediction'))
map("world",add=T)
# In 2006, prediction that the American west will have a moderately wet year
# while the northeast and south will have average precipitation
# In 2005, pc1 and pc3 had the most anomalous values, in lin models alpha for pc1 > alpha for pc3
# Thus 2006 prediction dominated by EOF1 and negative expression of EOF3 to a lesser extent
########################
# j)
par(mfrow=c(1,1))
mybreaks <-c(seq(-1,-0.001,by=0.004),seq(0.001,1,by=0.004))
mycolpal <-colorRampPalette(c("red","white","blue"))
mycut <-cut(x_2006,breaks=mybreaks,label=FALSE)
mycol <-mycolpal(length(mybreaks))[mycut]
plot(lon.lat$lon, lon.lat$lat, col = mycol, axes=FALSE, xlab='', ylab='',
main = paste('2006 PWDI prediction'))
map("world",add=T)
# k)
my_varimax <-varimax(PCA$rotation[,1:m])
# l)
rotated_eofs <- PCA$rotation[,1:m] %*% my_varimax$rotmat
rotated_pcs <- LBDA %*% rotated_eofs
rotated_pcs
# m)
S_og <- diag(PCA$sdev[1:4]^2)
S_rotated <- t(my_varimax$rotmat) %*% S_og %*% my_varimax$rotmat
# S_rotated no longer diagonal matrix, PCs are correlated to each other
S_og
S_rotated
# n)
par(mfrow=c(2,2))
mybreaks <-c(seq(-0.04,-0.001,by=0.004),seq(0.001,0.04,by=0.004))
mycolpal <-colorRampPalette(c("red","white","blue"))
for (i in 1:m){
mycut <-cut(rotated_eofs[,i],breaks=mybreaks,label=FALSE)
mycol <-mycolpal(length(mybreaks))[mycut]
plot(lon.lat$lon, lon.lat$lat, col = mycol, axes=FALSE, xlab='', ylab='',
main = paste('Rotated EOF', i, sep = " "))
map("world",add=T)
}
# o)
# Consider it read
rm(list = ls()) # Remove all the objects we created so far.
library(igraph) # Load the igraph package
g1 <- graph( edges=c(1,2, 2,3, 3, 1), n=3, directed=F )
plot(g1)
?graph
?read.csv
data <- read.csv('network_csv_files/network_2002', nrows=50)
setwd('/Users/ananyagangadhar/Desktop/M.Eng\ Project/Shortages_network/R_networks_scripts')
# Using igraph library to make networks
g1 <- graph( edges=c(1,2, 2,3, 3, 1), n=3, directed=F )
plot(g1)
data <- read.csv('network_csv_files/network_2002', nrows=50)
data <- read.csv('network_csv_files/network_2002.csv', nrows=50)
View(data)
View(data)
sources <- letters %>% distinct(priorityWdid) %>% rename(label = source)
destinations <- letters %>% distinct(analysisWdid) %>% rename(label = destination)
library(tidyverse)
library(igraph)
# isolate source and destination columns
sources <- letters %>% distinct(priorityWdid) %>% rename(label = source)
destinations <- letters %>% distinct(analysisWdid) %>% rename(label = destination)
# read subset of network .csv file
my_data <- read.csv('network_csv_files/network_2002.csv', nrows=50)
# isolate source and destination columns
sources <- my_data %>% distinct(priorityWdid) %>% rename(label = source)
destinations <- my_data %>% distinct(analysisWdid) %>% rename(label = destination)
sources <- my_data %>% distinct(priorityWdid) %>% rename(label = priorityWdid)
destinations <- my_data %>% distinct(analysisWdid) %>% rename(label = analysisWdid)
nodes <- full_join(sources, destinations, by = "label")
nodes
nodes <- full_join(sources, destinations, by = "label")
nodes <- nodes %>% rowid_to_column("id")
nodes
interactions <- my_data %>% group_by(priorityWdid, analysisWdid) %>% summarise(weight = n()) %>% ungroup()
interactions
interactions <- my_data %>% group_by(priorityWdid, analysisWdid, priority_sum_wtd_count)  %>% ungroup()
interactions
interactions <- my_data %>% group_by(priorityWdid, analysisWdid) %>% summarise(weight = priority_sum_wtd_count) %>% ungroup()
interactions
# create edge list
interactions <- my_data %>% group_by(priorityWdid, analysisWdid) %>% summarise(weight = priority_sum_wtd_count) %>% ungroup()
interactions <- distinct(interactions)
interactions
edges <- interactions %>% left_join(nodes, by = c("priorityWdid" = "label")) %>% rename(from = id)
edges <- edges %>% left_join(nodes, by = c("analysisWdid" = "label")) %>% rename(to = id)
edges
# remove superfluous rows
edges <- select(edges, from, to, weight)
edges
network_2002 <- graph_from_data_frame(d = edges, vertices = nodes, directed = TRUE)
plot(network_2002, edge.arrow.size = 0.2)
network_2002 <- graph_from_data_frame(d = edges, vertices = nodes, directed = TRUE)
par(mfrow=c(1,1))
plot(network_2002, edge.arrow.size = 0.2)
par(mfrow=c(1,1))
plot(network_2002, layout = layout_with_graphopt, edge.arrow.size = 0.2)
library(ggraph)
ggraph(routes_tidy) + geom_edge_link() + geom_node_point() + theme_graph()
ggraph(network_2002) + geom_edge_link() + geom_node_point() + theme_graph()
# plot network using ggraph
ggraph(network_2002, layout = "graphopt") +
geom_node_point() +
geom_edge_link(aes(width = weight), alpha = 0.8) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label), repel = TRUE) +
labs(edge_width = "Letters") +
theme_graph()
# plot network using ggraph
ggraph(network_2002, layout = "graphopt") +
geom_node_point() +
geom_edge_link(aes(width = weight), alpha = 0.8) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label), repel = TRUE) +
labs(edge_width = "Number of days out of priority") +
theme_graph()
# plot linear map
ggraph(network_2002, layout = "linear") +
geom_edge_arc(aes(width = weight), alpha = 0.8) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label)) +
labs(edge_width = "Number of days out of priority") +
theme_graph()
# plot linear map
ggraph(network_2002, layout = "linear") +
geom_edge_arc(aes(width = weight), alpha = 0.8) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label)) +
labs(edge_width = "Days") +
theme_graph()
library(visNetwork)
library(networkD3)
install.packages('visNetwork')
library(visNetwork)
library(networkD3)
# interactive plot using visNetwork
visNetwork(nodes, edges)
edges <- mutate(edges, width = weight/50 + 1)
visNetwork(nodes, edges) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrows = "middle")
source('~/Desktop/M.Eng Project/Shortages_network/R_networks_scripts/igraph_test.R')
source('~/Desktop/M.Eng Project/Shortages_network/R_networks_scripts/igraph_test.R')
ceb <- cluster_edge_betweenness(network_2002)
plot(ceb, net)
ceb <- cluster_label_prop(network_2002)
plot(ceb, network_2002)
# read subset of network .csv file
my_data <- read.csv('network_csv_files/network_2002.csv', nrows=100)
# create node list
sources <- my_data %>% distinct(priorityWdid) %>% rename(label = priorityWdid)
destinations <- my_data %>% distinct(analysisWdid) %>% rename(label = analysisWdid)
# add unique IDs
nodes <- full_join(sources, destinations, by = "label")
nodes <- nodes %>% rowid_to_column("id")
nodes
# create edge list
interactions <- my_data %>% group_by(priorityWdid, analysisWdid) %>% summarise(weight = priority_sum_wtd_count) %>% ungroup()
interactions <- distinct(interactions)
interactions
edges <- interactions %>% left_join(nodes, by = c("priorityWdid" = "label")) %>% rename(from = id)
edges <- edges %>% left_join(nodes, by = c("analysisWdid" = "label")) %>% rename(to = id)
# remove superfluous rows
edges <- select(edges, from, to, weight)
edges
# create network using igraph package
network_2002 <- graph_from_data_frame(d = edges, vertices = nodes, directed = TRUE)
par(mfrow=c(1,1))
plot(network_2002, layout = layout_with_graphopt, edge.arrow.size = 0.2)
network_2002 <- graph_from_data_frame(d = edges, vertices = nodes, directed = TRUE)
par(mfrow=c(1,1))
plot(network_2002, layout = layout_with_graphopt, edge.arrow.size = 0.2)
plot(network_2002, layout = layout_with_graphopt, edge.arrow.size = 0.2)
# plot network using ggraph
ggraph(network_2002, layout = "graphopt") +
geom_node_point() +
geom_edge_link(aes(width = weight), alpha = 0.8) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label), repel = TRUE) +
labs(edge_width = "Days") +
theme_graph()
# plot linear map
ggraph(network_2002, layout = "linear") +
geom_edge_arc(aes(width = weight), alpha = 0.8) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label)) +
labs(edge_width = "Days") +
theme_graph()
visNetwork(nodes, edges) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrows = "middle")
# interactive plot using visNetwork
visNetwork(nodes, edges)
# read subset of network .csv file
my_data <- read.csv('network_csv_files/network_2002.csv')#, nrows=100)
# create node list
sources <- my_data %>% distinct(priorityWdid) %>% rename(label = priorityWdid)
destinations <- my_data %>% distinct(analysisWdid) %>% rename(label = analysisWdid)
# add unique IDs
nodes <- full_join(sources, destinations, by = "label")
nodes <- nodes %>% rowid_to_column("id")
nodes
# create edge list
interactions <- my_data %>% group_by(priorityWdid, analysisWdid) %>% summarise(weight = priority_sum_wtd_count) %>% ungroup()
interactions <- distinct(interactions)
interactions
edges <- interactions %>% left_join(nodes, by = c("priorityWdid" = "label")) %>% rename(from = id)
edges <- edges %>% left_join(nodes, by = c("analysisWdid" = "label")) %>% rename(to = id)
# remove superfluous rows
# remove superfluous rows
edges <- select(edges, from, to, weight)
edges
# create network using igraph package
network_2002 <- graph_from_data_frame(d = edges, vertices = nodes, directed = TRUE)
par(mfrow=c(1,1))
plot(network_2002, layout = layout_with_graphopt, edge.arrow.size = 0.2)
plot(network_2002, layout = layout_with_graphopt, edge.arrow.size = 0.2)
# plot network using ggraph
ggraph(network_2002, layout = "graphopt") +
geom_node_point() +
geom_edge_link(aes(width = weight), alpha = 0.8) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label), repel = TRUE) +
labs(edge_width = "Days") +
theme_graph()
# interactive plot using visNetwork
visNetwork(nodes, edges)
